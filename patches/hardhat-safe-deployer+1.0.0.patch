diff --git a/node_modules/hardhat-safe-deployer/dist/adapter.js b/node_modules/hardhat-safe-deployer/dist/adapter.js
index fd40cf2..e3b6afc 100644
--- a/node_modules/hardhat-safe-deployer/dist/adapter.js
+++ b/node_modules/hardhat-safe-deployer/dist/adapter.js
@@ -8,7 +8,8 @@ const ethers_1 = require("ethers");
 const execution_1 = require("./execution");
 const axios_1 = __importDefault(require("axios"));
 class SafeProviderAdapter {
-    constructor(wrapped, signer, safe, serviceUrl) {
+    constructor(wrapped, signer, safe, chainId, serviceUrl) {
+        this.chainId = chainId;
         this.submittedTxs = new Map();
         this.createLibAddress = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4";
         this.createLibInterface = new ethers_1.utils.Interface(["function performCreate(uint256,bytes)"]);
@@ -60,7 +61,11 @@ class SafeProviderAdapter {
             });
             const estimation = await this.estimateSafeTx(this.safe, safeTx);
             safeTx.safeTxGas = estimation.safeTxGas;
-            const safeTxHash = ethers_1.utils._TypedDataEncoder.hash({ verifyingContract: this.safe }, execution_1.EIP712_SAFE_TX_TYPE, safeTx);
+            const safeTxHash = ethers_1.utils._TypedDataEncoder.hash({
+                chainId: this.chainId,
+                verifyingContract: this.safe,
+            }, execution_1.EIP712_SAFE_TX_TYPE, safeTx)
+            // const safeTxHash = ethers_1.utils._TypedDataEncoder.hash({ verifyingContract: this.safe }, execution_1.EIP712_SAFE_TX_TYPE, safeTx);
             const signature = await execution_1.signHash(this.signer, safeTxHash);
             await this.proposeTx(safeTxHash, safeTx, signature);
             this.submittedTxs.set(safeTxHash, {
diff --git a/node_modules/hardhat-safe-deployer/dist/index.js b/node_modules/hardhat-safe-deployer/dist/index.js
index f83b6f9..514f213 100644
--- a/node_modules/hardhat-safe-deployer/dist/index.js
+++ b/node_modules/hardhat-safe-deployer/dist/index.js
@@ -6,7 +6,11 @@ const config_1 = require("hardhat/config");
 const adapter_1 = require("./adapter");
 const setupSafeDeployer = (signer, safe, serivceUrl) => {
     config_1.extendEnvironment((env) => {
-        env.network.provider = new adapter_1.SafeProviderAdapter(env.network.provider, signer.connect(env.ethers.provider), safe, serivceUrl);
+        const { chainId } = env.network.config;
+        if (!chainId) {
+          throw new Error('The chainId was required in hardhat network config');
+        }
+        env.network.provider = new adapter_1.SafeProviderAdapter(env.network.provider, signer.connect(env.ethers.provider), safe, chainId, serivceUrl);
     });
 };
 exports.setupSafeDeployer = setupSafeDeployer;
diff --git a/node_modules/hardhat-safe-deployer/src/adapter.ts b/node_modules/hardhat-safe-deployer/src/adapter.ts
index 0ba01ac..57f334a 100644
--- a/node_modules/hardhat-safe-deployer/src/adapter.ts
+++ b/node_modules/hardhat-safe-deployer/src/adapter.ts
@@ -5,18 +5,19 @@ import { Wallet } from "@ethersproject/wallet";
 import axios from "axios"
 
 export class SafeProviderAdapter implements EthereumProvider {
-
-    submittedTxs = new Map<string, any>();
-
-    createLibAddress = "0x8538FcBccba7f5303d2C679Fa5d7A629A8c9bf4A"
+    chainId: number
+    createLibAddress = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
     createLibInterface = new utils.Interface(["function performCreate(uint256,bytes)"])
     safeInterface = new utils.Interface(["function nonce() view returns(uint256)"])
     safeContract: Contract
     safe: string
     serviceUrl: string
     signer: Wallet
+    submittedTxs = new Map<string, any>()
     wrapped: any
-    constructor(wrapped: any, signer: Wallet, safe: string, serviceUrl?: string) {
+    constructor(wrapped: any, signer: Wallet, safe: string, chainId: number, serviceUrl?: string) {
+        console.log('here with chainid', chainId)
+        this.chainId = chainId;
         this.wrapped = wrapped
         this.signer = signer
         this.safe = utils.getAddress(safe)
@@ -73,7 +74,10 @@ export class SafeProviderAdapter implements EthereumProvider {
             })
             const estimation = await this.estimateSafeTx(this.safe, safeTx)
             safeTx.safeTxGas = estimation.safeTxGas
-            const safeTxHash = utils._TypedDataEncoder.hash({ verifyingContract: this.safe }, EIP712_SAFE_TX_TYPE, safeTx)
+            const safeTxHash = utils._TypedDataEncoder.hash({
+                chainId: this.chainId,
+                verifyingContract: this.safe,
+            }, EIP712_SAFE_TX_TYPE, safeTx)
             const signature = await signHash(this.signer, safeTxHash)
             await this.proposeTx(safeTxHash, safeTx, signature)
             this.submittedTxs.set(safeTxHash, {
diff --git a/node_modules/hardhat-safe-deployer/src/index.ts b/node_modules/hardhat-safe-deployer/src/index.ts
index 69c5fa8..d5e0272 100644
--- a/node_modules/hardhat-safe-deployer/src/index.ts
+++ b/node_modules/hardhat-safe-deployer/src/index.ts
@@ -3,12 +3,22 @@ import { Wallet } from "@ethersproject/wallet"
 import { extendEnvironment } from "hardhat/config"
 import { SafeProviderAdapter } from "./adapter"
 
+export const aa = () => {
+  console.log('hmmmmmmm');
+}
+
 export const setupSafeDeployer = (signer: Wallet, safe: string, serivceUrl?: string) => {
+  console.log ('creating signerrr')
     extendEnvironment((env) => {
+      const { chainId } = env.network.config;
+        if (!chainId) {
+          throw new Error('The chainId was required in hardhat network config');
+        }
         env.network.provider = new SafeProviderAdapter(
           env.network.provider,
           signer.connect(env.ethers.provider),
           safe,
+          chainId,
           serivceUrl
         )
     })
